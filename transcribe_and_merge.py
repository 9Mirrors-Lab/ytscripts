#!/usr/bin/env python3n"""nYouTube Transcript Merge ScriptnnThis script extracts transcripts from YouTube videos and merges them into a single markdown file.nIt supports multiple output formats and provides a clean, readable transcript.nnUsage:n    python transcribe_and_merge.py <youtube_url_or_id> <output_prefix>nnExample:n    python transcribe_and_merge.py https://youtu.be/dQw4w9WgXcQ my_videon    python transcribe_and_merge.py dQw4w9WgXcQ my_videon"""nnimport sysnimport jsonnimport renfrom pathlib import Pathnfrom typing import List, Dict, Any, Optionalnfrom youtube_transcript_api import YouTubeTranscriptApinfrom youtube_transcript_api.formatters import JSONFormatter, TextFormatternnndef extract_video_id(url_or_id: str) -> str:n    """Extract video ID from YouTube URL or return as-is if already an ID."""n    # Pattern to match YouTube URLsn    patterns = [n        r"(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)([^&\n?#]+)",n        r"youtube\.com/watch\?.*v=([^&\n?#]+)",n    ]n    n    for pattern in patterns:n        match = re.search(pattern, url_or_id)n        if match:n            return match.group(1)n    n    # If no pattern matches, assume it's already a video IDn    return url_or_idnnndef format_timestamp(seconds: float) -> str:n    """Convert seconds to HH:MM:SS format."""n    hours = int(seconds // 3600)n    minutes = int((seconds % 3600) // 60)n    seconds = int(seconds % 60)n    n    if hours > 0:n        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"n    else:n        return f"{minutes:02d}:{seconds:02d}"nnndef clean_text(text: str) -> str:n    """Clean and format transcript text."""n    # Remove extra whitespace and normalizen    text = re.sub(r'\s+', ' ', text.strip())n    n    # Remove common transcript artifactsn    text = re.sub(r'\[.*?\]', '', text)  # Remove bracketed contentn    text = re.sub(r'\(.*?\)', '', text)  # Remove parenthetical contentn    n    return textnnndef create_markdown_transcript(transcript_data: List[Dict[str, Any]], video_id: str) -> str:n    """Create a markdown formatted transcript."""n    markdown_lines = [n        f"# YouTube Transcript - {video_id}\n",n        f"*Generated from video: https://youtu.be/{video_id}*\n",n        "---\n\n"n    ]n    n    for entry in transcript_data:n        timestamp = format_timestamp(entry['start'])n        text = clean_text(entry['text'])n        n        if text:  # Only add non-empty entriesn            markdown_lines.append(f"**[{timestamp}]** {text}\n")n    n    return "".join(markdown_lines)nnndef create_json_transcript(transcript_data: List[Dict[str, Any]]) -> str:n    """Create a JSON formatted transcript."""n    return json.dumps(transcript_data, indent=2)nnndef create_tsv_transcript(transcript_data: List[Dict[str, Any]]) -> str:n    """Create a TSV formatted transcript."""n    tsv_lines = ["Timestamp\tText\n"]n    n    for entry in transcript_data:n        timestamp = format_timestamp(entry['start'])n        text = clean_text(entry['text'])n        n        if text:  # Only add non-empty entriesn            # Escape tabs in textn            text = text.replace("\t", " ")n            tsv_lines.append(f"{timestamp}\t{text}\n")n    n    return "".join(tsv_lines)nnndef save_transcript(content: str, filename: str, output_dir: Path = Path(".")):n    """Save transcript content to file."""n    output_path = output_dir / filenamen    n    try:n        with open(output_path, 'w', encoding='utf-8') as f:n            f.write(content)n        print(f"✓ Saved: {output_path}")n    except Exception as e:n        print(f"✗ Error saving {filename}: {e}")nnndef main():n    """Main function to process YouTube transcript."""n    if len(sys.argv) != 3:n        print("Usage: python transcribe_and_merge.py <youtube_url_or_id> <output_prefix>")n        print("Example: python transcribe_and_merge.py https://youtu.be/dQw4w9WgXcQ my_video")n        sys.exit(1)n    n    url_or_id = sys.argv[1]n    output_prefix = sys.argv[2]n    n    try:n        # Extract video IDn        video_id = extract_video_id(url_or_id)n        print(f"Processing video ID: {video_id}")n        n        # Get transcriptn        print("Fetching transcript...")n        transcript_list = YouTubeTranscriptApi.get_transcript(video_id)n        n        if not transcript_list:n            print("✗ No transcript found for this video")n            sys.exit(1)n        n        print(f"✓ Found {len(transcript_list)} transcript entries")n        n        # Create output directoryn        output_dir = Path("outputs")n        output_dir.mkdir(exist_ok=True)n        n        # Generate different formatsn        print("\nGenerating transcript formats...")n        n        # Markdown formatn        markdown_content = create_markdown_transcript(transcript_list, video_id)n        save_transcript(markdown_content, f"{output_prefix}_transcript.md", output_dir)n        n        # JSON formatn        json_content = create_json_transcript(transcript_list)n        save_transcript(json_content, f"{output_prefix}_transcript.json", output_dir)n        n        # TSV formatn        tsv_content = create_tsv_transcript(transcript_list)n        save_transcript(tsv_content, f"{output_prefix}_transcript.tsv", output_dir)n        n        print("\n✓ All transcript formats generated successfully!")n        print(f"\nFiles saved in: {output_dir.absolute()}")n        n    except Exception as e:n        print(f"✗ Error: {e}")n        sys.exit(1)nnnif __name__ == "__main__":n    main()