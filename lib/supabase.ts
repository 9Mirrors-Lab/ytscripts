import { createClient } from '@supabase/supabase-js';nnconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://mqnhqdtxruwyrinlhgox.supabase.co';nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1xbmhxZHR4cnV3eXJpbmxoZ294Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3MzY0MzEsImV4cCI6MjA2MDMxMjQzMX0.4tme48Pm3GIVxhZTDdhxVrAJ3quLnpk7WTQkDDP6viI';nnexport const supabase = createClient(supabaseUrl, supabaseAnonKey);nn// Types for our processed videos tablenexport interface ProcessedVideoDb {n  id: string;n  user_id: string | null;n  video_url: string;n  video_id: string;n  title: string;n  channel_name?: string;n  thumbnail_url?: string;n  prefix: string;n  markdown_content?: string;n  processed_at: string;n  created_at: string;n  updated_at: string;n  playbook_generated: boolean;n  playbook_content?: string;n  playbook_generated_at?: string;n}nn// Helper function to extract video ID from URLnexport const extractVideoId = (url: string): string => {n  const match = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n?#]+)/);n  return match ? match[1] : url;n};nn// Helper function to save processed video to Supabasenexport const saveProcessedVideo = async (videoData: {n  video_url: string;n  title: string;n  channel_name?: string;n  thumbnail_url?: string;n  prefix: string;n  markdown_content?: string;n}) => {n  const video_id = extractVideoId(videoData.video_url);n  n  // Get current user (will be null for anonymous users)n  const { data: { user } } = await supabase.auth.getUser();n  n  const { data, error } = await supabasen    .from('processed_videos')n    .insert([n      {n        user_id: user?.id || null, // Allow null for anonymous usersn        video_url: videoData.video_url,n        video_id,n        title: videoData.title,n        channel_name: videoData.channel_name,n        thumbnail_url: videoData.thumbnail_url,n        prefix: videoData.prefix,n        markdown_content: videoData.markdown_content,n      }n    ])n    .select()n    .single();nn  if (error) {n    console.error('Error saving processed video:', error);n    throw error;n  }nn  return data;n};nn// Helper function to load processed videos from Supabasenexport const loadProcessedVideos = async () => {n  // Get current user (will be null for anonymous users)n  const { data: { user } } = await supabase.auth.getUser();n  n  let query = supabasen    .from('processed_videos')n    .select('*')n    .order('created_at', { ascending: false });n  n  // If user is authenticated, filter by user_idn  // If anonymous, show all videos with null user_idn  if (user) {n    query = query.eq('user_id', user.id);n  } else {n    query = query.is('user_id', null);n  }nn  const { data, error } = await query;nn  if (error) {n    console.error('Error loading processed videos:', error);n    throw error;n  }nn  return data || [];n};nn// Helper function to update video playbooknexport const updateVideoPlaybook = async (videoId: string, playbookContent: string) => {n  const { data, error } = await supabasen    .from('processed_videos')n    .update({n      playbook_content: playbookContent,n      playbook_generated: true,n      playbook_generated_at: new Date().toISOString(),n    })n    .eq('id', videoId)n    .select()n    .single();nn  if (error) {n    console.error('Error updating video playbook:', error);n    throw error;n  }nn  return data;n};nn// Helper function to mark playbook generation as failednexport const markPlaybookGenerationFailed = async (videoId: string, errorMessage?: string) => {n  const { data, error } = await supabasen    .from('processed_videos')n    .update({n      playbook_content: errorMessage ? `ERROR: ${errorMessage}` : 'ERROR: Playbook generation failed',n      playbook_generated: false,n    })n    .eq('id', videoId)n    .select()n    .single();nn  if (error) {n    console.error('Error marking playbook generation failed:', error);n    throw error;n  }nn  return data;n};nn// Helper function to delete processed videonexport const deleteProcessedVideo = async (videoId: string) => {n  const { error } = await supabasen    .from('processed_videos')n    .delete()n    .eq('id', videoId);nn  if (error) {n    console.error('Error deleting processed video:', error);n    throw error;n  }nn  return true;n};