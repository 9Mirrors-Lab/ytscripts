import React from "react";nimport { Progress } from "@/components/ui/progress";nimport { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";nimport { Badge } from "@/components/ui/badge";nimport { Clock, CheckCircle, AlertCircle, Zap } from "lucide-react";nninterface ProgressStep {n  id: string;n  title: string;n  status: "pending" | "processing" | "completed" | "error";n  message?: string;n  progress?: number;n}nninterface PlaybookGenerationProgressProps {n  steps: ProgressStep[];n  currentStep: string;n  overallProgress: number;n  isComplete: boolean;n  error?: string;n}nnconst getStepIcon = (status: ProgressStep["status"]) => {n  switch (status) {n    case "pending":n      return <Clock className="h-4 w-4 text-gray-400" />;n    case "processing":n      return <Clock className="h-4 w-4 text-blue-400 animate-spin" />;n    case "completed":n      return <CheckCircle className="h-4 w-4 text-green-400" />;n    case "error":n      return <AlertCircle className="h-4 w-4 text-red-400" />;n  }n};nnconst getStepColor = (status: ProgressStep["status"]) => {n  switch (status) {n    case "pending":n      return "text-gray-400";n    case "processing":n      return "text-blue-400";n    case "completed":n      return "text-green-400";n    case "error":n      return "text-red-400";n  }n};nnexport const PlaybookGenerationProgress: React.FC<PlaybookGenerationProgressProps> = ({n  steps,n  currentStep,n  overallProgress,n  isComplete,n  error,n}) => {n  return (n    <Card className="bg-gray-800/30 border-gray-700">n      <CardHeader className="pb-3">n        <CardTitle className="text-lg text-white flex items-center gap-2">n          <Zap className="h-5 w-5 text-purple-400" />n          Playbook Generation Progressn        </CardTitle>n      </CardHeader>n      <CardContent className="space-y-4">n        {/* Overall Progress */}n        <div className="space-y-2">n          <div className="flex items-center justify-between text-sm">n            <span className="text-gray-300">Overall Progress</span>n            <span className="text-white font-medium">{Math.round(overallProgress)}%</span>n          </div>n          <Progress value={overallProgress} className="h-2" />n        </div>n        n        {/* Steps */}n        <div className="space-y-3">n          {steps.map((step, index) => (n            <div key={step.id} className="flex items-start gap-3">n              <div className="flex-shrink-0 mt-1">n                {getStepIcon(step.status)}n              </div>n              <div className="flex-1 min-w-0">n                <div className="flex items-center gap-2 mb-1">n                  <h4 className={`text-sm font-medium ${getStepColor(step.status)}`}>n                    {step.title}n                  </h4>n                  {step.status === "processing" && (n                    <Badge variant="outline" className="text-xs border-blue-500/30 text-blue-300">n                      Processing...n                    </Badge>n                  )}n                  {step.status === "completed" && (n                    <Badge variant="default" className="text-xs bg-green-600">n                      Completen                    </Badge>n                  )}n                  {step.status === "error" && (n                    <Badge variant="destructive" className="text-xs">n                      Errorn                    </Badge>n                  )}n                </div>n                {step.message && (n                  <p className="text-xs text-gray-400">{step.message}</p>n                )}n                {step.progress !== undefined && step.status === "processing" && (n                  <div className="mt-2">n                    <Progress value={step.progress} className="h-1" />n                  </div>n                )}n              </div>n            </div>n          ))}n        </div>n        n        {/* Error Message */}n        {error && (n          <div className="bg-red-900/20 border border-red-700 rounded-lg p-3">n            <div className="flex items-start gap-2">n              <AlertCircle className="h-4 w-4 text-red-400 mt-0.5 flex-shrink-0" />n              <div>n                <h4 className="text-sm font-medium text-red-300 mb-1">Generation Error</h4>n                <p className="text-xs text-red-200">{error}</p>n              </div>n            </div>n          </div>n        )}n        n        {/* Completion Message */}n        {isComplete && !error && (n          <div className="bg-green-900/20 border border-green-700 rounded-lg p-3">n            <div className="flex items-start gap-2">n              <CheckCircle className="h-4 w-4 text-green-400 mt-0.5 flex-shrink-0" />n              <div>n                <h4 className="text-sm font-medium text-green-300 mb-1">Generation Complete</h4>n                <p className="text-xs text-green-200">n                  Your startup playbook has been successfully generated and is ready to view.n                </p>n              </div>n            </div>n          </div>n        )}n      </CardContent>n    </Card>n  );n};