import React from "react";nimport { TrendingUp, Target, BarChart3, Clock, AlertTriangle, CheckCircle } from "lucide-react";nimport { Badge } from "@/components/ui/badge";nimport { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";nninterface TradingPlaybookTemplateProps {n  content: string;n  prefix?: string;n}nnexport const TradingPlaybookTemplate: React.FC<TradingPlaybookTemplateProps> = ({ content, prefix }) => {n  let tradingData: any = null;nn  try {n    tradingData = JSON.parse(content);n  } catch (error) {n    console.error("Error parsing trading playbook content:", error);n    return (n      <div className="space-y-4">n        <div className="bg-gray-800/50 rounded-lg p-4 border border-gray-700">n          <h3 className="text-lg font-semibold text-white mb-2">Trading Playbook Content</h3>n          <pre className="whitespace-pre-wrap text-sm text-gray-300 font-mono">n            {content}n          </pre>n        </div>n      </div>n    );n  }nn  return (n    <div className="space-y-6">n      {/* Header */}n      <div className="bg-gradient-to-br from-green-900/20 to-blue-900/20 rounded-lg border border-green-500/30 p-6">n        <div className="flex items-start justify-between mb-4">n          <div className="flex-1">n            <h1 className="text-2xl font-bold text-white mb-2">n              {tradingData.title || "Trading Strategy Playbook"}n            </h1>n            <div className="flex items-center gap-2 mb-3">n              <Badge variant="default" className="bg-green-600">n                <TrendingUp className="h-3 w-3 mr-1" />n                Trading Strategyn              </Badge>n              <Badge variant="outline" className="border-blue-500/30 text-blue-300">n                <Target className="h-3 w-3 mr-1" />n                Risk Managedn              </Badge>n              <Badge variant="outline" className="border-yellow-500/30 text-yellow-300">n                <Clock className="h-3 w-3 mr-1" />n                Time-Basedn              </Badge>n            </div>n          </div>n        </div>n        n        {tradingData.overview && (n          <div className="prose prose-invert max-w-none">n            <p className="text-gray-300 leading-relaxed">{tradingData.overview}</p>n          </div>n        )}n      </div>n      n      {/* Trading Strategy Grid */}n      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">n        {/* Entry Strategy */}n        {tradingData.entryStrategy && (n          <Card className="bg-gray-800/30 border-gray-700">n            <CardHeader className="pb-3">n              <CardTitle className="text-lg text-white flex items-center gap-2">n                <Target className="h-5 w-5 text-green-400" />n                Entry Strategyn              </CardTitle>n            </CardHeader>n            <CardContent className="space-y-3">n              {Object.entries(tradingData.entryStrategy).map(([key, value]: [string, any]) => (n                <div key={key} className="space-y-1">n                  <h4 className="text-sm font-medium text-gray-300 capitalize">n                    {key.replace(/([A-Z])/g, " $1").trim()}n                  </h4>n                  <p className="text-sm text-gray-400">{String(value)}</p>n                </div>n              ))}n            </CardContent>n          </Card>n        )}n        n        {/* Exit Strategy */}n        {tradingData.exitStrategy && (n          <Card className="bg-gray-800/30 border-gray-700">n            <CardHeader className="pb-3">n              <CardTitle className="text-lg text-white flex items-center gap-2">n                <CheckCircle className="h-5 w-5 text-red-400" />n                Exit Strategyn              </CardTitle>n            </CardHeader>n            <CardContent className="space-y-3">n              {Object.entries(tradingData.exitStrategy).map(([key, value]: [string, any]) => (n                <div key={key} className="space-y-1">n                  <h4 className="text-sm font-medium text-gray-300 capitalize">n                    {key.replace(/([A-Z])/g, " $1").trim()}n                  </h4>n                  <p className="text-sm text-gray-400">{String(value)}</p>n                </div>n              ))}n            </CardContent>n          </Card>n        )}n        n        {/* Risk Management */}n        {tradingData.riskManagement && (n          <Card className="bg-gray-800/30 border-gray-700">n            <CardHeader className="pb-3">n              <CardTitle className="text-lg text-white flex items-center gap-2">n                <AlertTriangle className="h-5 w-5 text-yellow-400" />n                Risk Managementn              </CardTitle>n            </CardHeader>n            <CardContent className="space-y-3">n              {Object.entries(tradingData.riskManagement).map(([key, value]: [string, any]) => (n                <div key={key} className="space-y-1">n                  <h4 className="text-sm font-medium text-gray-300 capitalize">n                    {key.replace(/([A-Z])/g, " $1").trim()}n                  </h4>n                  <p className="text-sm text-gray-400">{String(value)}</p>n                </div>n              ))}n            </CardContent>n          </Card>n        )}n        n        {/* Technical Analysis */}n        {tradingData.technicalAnalysis && (n          <Card className="bg-gray-800/30 border-gray-700">n            <CardHeader className="pb-3">n              <CardTitle className="text-lg text-white flex items-center gap-2">n                <BarChart3 className="h-5 w-5 text-blue-400" />n                Technical Analysisn              </CardTitle>n            </CardHeader>n            <CardContent className="space-y-3">n              {Object.entries(tradingData.technicalAnalysis).map(([key, value]: [string, any]) => (n                <div key={key} className="space-y-1">n                  <h4 className="text-sm font-medium text-gray-300 capitalize">n                    {key.replace(/([A-Z])/g, " $1").trim()}n                  </h4>n                  <p className="text-sm text-gray-400">{String(value)}</p>n                </div>n              ))}n            </CardContent>n          </Card>n        )}n        n        {/* Market Conditions */}n        {tradingData.marketConditions && (n          <Card className="bg-gray-800/30 border-gray-700">n            <CardHeader className="pb-3">n              <CardTitle className="text-lg text-white flex items-center gap-2">n                <TrendingUp className="h-5 w-5 text-purple-400" />n                Market Conditionsn              </CardTitle>n            </CardHeader>n            <CardContent className="space-y-3">n              {Object.entries(tradingData.marketConditions).map(([key, value]: [string, any]) => (n                <div key={key} className="space-y-1">n                  <h4 className="text-sm font-medium text-gray-300 capitalize">n                    {key.replace(/([A-Z])/g, " $1").trim()}n                  </h4>n                  <p className="text-sm text-gray-400">{String(value)}</p>n                </div>n              ))}n            </CardContent>n          </Card>n        )}n        n        {/* Timeframes */}n        {tradingData.timeframes && (n          <Card className="bg-gray-800/30 border-gray-700">n            <CardHeader className="pb-3">n              <CardTitle className="text-lg text-white flex items-center gap-2">n                <Clock className="h-5 w-5 text-indigo-400" />n                Timeframesn              </CardTitle>n            </CardHeader>n            <CardContent className="space-y-3">n              {Object.entries(tradingData.timeframes).map(([key, value]: [string, any]) => (n                <div key={key} className="space-y-1">n                  <h4 className="text-sm font-medium text-gray-300 capitalize">n                    {key.replace(/([A-Z])/g, " $1").trim()}n                  </h4>n                  <p className="text-sm text-gray-400">{String(value)}</p>n                </div>n              ))}n            </CardContent>n          </Card>n        )}n      </div>n      n      {/* Additional Notes */}n      {tradingData.notes && (n        <div className="bg-gray-800/30 rounded-lg border border-gray-700 p-4">n          <h3 className="text-lg font-semibold text-white mb-3">Additional Notes</h3>n          <div className="prose prose-invert max-w-none">n            <p className="text-gray-300 leading-relaxed">{tradingData.notes}</p>n          </div>n        </div>n      )}n      n      {/* Disclaimer */}n      <div className="bg-yellow-900/20 rounded-lg border border-yellow-500/30 p-4">n        <div className="flex items-start gap-2">n          <AlertTriangle className="h-5 w-5 text-yellow-400 mt-0.5 flex-shrink-0" />n          <div>n            <h4 className="text-sm font-medium text-yellow-300 mb-1">Trading Disclaimer</h4>n            <p className="text-xs text-yellow-100">n              This trading strategy is for educational purposes only. Past performance does not guarantee future results. n              Always conduct your own research and consider consulting with a financial advisor before making trading decisions. n              Trading involves substantial risk of loss and is not suitable for all investors.n            </p>n          </div>n        </div>n      </div>n    </div>n  );n};