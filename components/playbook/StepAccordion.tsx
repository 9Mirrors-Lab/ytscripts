import React from "react";nimport { ChevronDown, Clock, Zap } from "lucide-react";nimport { Badge } from "@/components/ui/badge";nimport { PlaybookStep } from "./PlaybookTemplate";nninterface StepAccordionProps {n  step: PlaybookStep;n  stepNumber: number;n}nnexport const StepAccordion: React.FC<StepAccordionProps> = ({ step, stepNumber }) => {n  const [isOpen, setIsOpen] = React.useState(false);nn  const getDifficultyColor = (difficulty: string) => {n    switch (difficulty) {n      case "Beginner":n        return "bg-green-600";n      case "Intermediate":n        return "bg-yellow-600";n      case "Advanced":n        return "bg-red-600";n      default:n        return "bg-gray-600";n    }n  };nn  return (n    <div className="border border-gray-700 rounded-lg overflow-hidden">n      <buttonn        onClick={() => setIsOpen(!isOpen)}n        className="w-full px-4 py-3 bg-gray-700/30 hover:bg-gray-700/50 transition-colors flex items-center justify-between text-left"n      >n        <div className="flex items-center gap-3">n          <div className="w-6 h-6 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center text-white text-xs font-bold">n            {stepNumber}n          </div>n          <h4 className="text-sm font-medium text-white">{step.title}</h4>n        </div>n        <div className="flex items-center gap-2">n          {step.difficulty && (n            <Badge className={getDifficultyColor(step.difficulty)}>n              {step.difficulty}n            </Badge>n          )}n          {step.duration && (n            <Badge variant="outline" className="border-gray-500/30 text-gray-300">n              <Clock className="h-3 w-3 mr-1" />n              {step.duration}n            </Badge>n          )}n          <ChevronDownn            className={`h-4 w-4 text-gray-400 transition-transform ${isOpen ? "rotate-180" : ""}`}n          />n        </div>n      </button>n      n      {isOpen && (n        <div className="px-4 py-3 bg-gray-800/20 border-t border-gray-700">n          <p className="text-sm text-gray-300 mb-3">{step.description}</p>n          n          {/* Tools */}n          {step.tools && step.tools.length > 0 && (n            <div className="mb-3">n              <div className="flex items-center gap-2 mb-2">n                <Zap className="h-3 w-3 text-blue-400" />n                <span className="text-xs font-medium text-blue-300">Tools</span>n              </div>n              <div className="flex flex-wrap gap-1">n                {step.tools.map((tool, index) => (n                  <Badge key={index} variant="secondary" className="text-xs">n                    {tool}n                  </Badge>n                ))}n              </div>n            </div>n          )}n          n          {/* Tips */}n          {step.tips && step.tips.length > 0 && (n            <div>n              <div className="flex items-center gap-2 mb-2">n                <span className="text-xs font-medium text-yellow-300">Tips</span>n              </div>n              <ul className="space-y-1">n                {step.tips.map((tip, index) => (n                  <li key={index} className="text-xs text-gray-300 flex items-start gap-2">n                    <span className="text-yellow-400 mt-1">â€¢</span>n                    {tip}n                  </li>n                ))}n              </ul>n            </div>n          )}n        </div>n      )}n    </div>n  );n};