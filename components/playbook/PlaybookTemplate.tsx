import React from "react";nimport { PlaybookHeader } from "./PlaybookHeader";nimport { ModernStepGuide } from "./ModernStepGuide";nimport { ToolsOverview } from "./ToolsOverview";nimport { DownloadSection } from "./DownloadSection";nimport { TipCard } from "./TipCard";nimport { StepAccordion } from "./StepAccordion";nimport { SidebarProgress } from "./SidebarProgress";nimport { TradingPlaybookTemplate } from "./TradingPlaybookTemplate";nimport { ToolGrid } from "./ToolGrid";nn// Types for playbook datanexport interface PlaybookStep {n  title: string;n  description: string;n  duration?: string;n  difficulty?: "Beginner" | "Intermediate" | "Advanced";n  tools?: string[];n  tips?: string[];n}nnexport interface PlaybookTool {n  name: string;n  description: string;n  category: string;n  url?: string;n  cost?: string;n}nnexport interface PlaybookResource {n  title: string;n  description: string;n  url?: string;n  type: "article" | "video" | "tool" | "template";n}nnexport interface PlaybookData {n  title: string;n  overview: string;n  modules: {n    title: string;n    description: string;n    steps: PlaybookStep[];n    tools: PlaybookTool[];n  }[];n  tags: string[];n  resources: PlaybookResource[];n}nninterface PlaybookTemplateProps {n  content: string;n  prefix?: string;n}nnexport const PlaybookTemplate: React.FC<PlaybookTemplateProps> = ({ content, prefix }) => {n  let playbookData: PlaybookData | null = null;n  let isTradingPlaybook = false;nn  try {n    const parsed = JSON.parse(content);n    // Check if it's a trading playbook by looking for trading-specific keywordsn    const contentString = JSON.stringify(parsed).toLowerCase();n    isTradingPlaybook = contentString.includes("trading") || n                       contentString.includes("market") || n                       contentString.includes("chart") || n                       contentString.includes("candle") || n                       contentString.includes("forex") || n                       contentString.includes("crypto");nn    if (isTradingPlaybook) {n      return <TradingPlaybookTemplate content={content} prefix={prefix} />;n    }nn    playbookData = parsed;n  } catch (error) {n    console.error("Error parsing playbook content:", error);n    // Fallback to plain text displayn    return (n      <div className="space-y-4">n        <div className="bg-gray-800/50 rounded-lg p-4 border border-gray-700">n          <h3 className="text-lg font-semibold text-white mb-2">Playbook Content</h3>n          <pre className="whitespace-pre-wrap text-sm text-gray-300 font-mono">n            {content}n          </pre>n        </div>n      </div>n    );n  }nn  if (!playbookData) {n    return (n      <div className="text-center py-8">n        <p className="text-gray-400">No playbook data available</p>n      </div>n    );n  }nn  return (n    <div className="space-y-6">n      {/* Header */}n      <PlaybookHeader title={playbookData.title} overview={playbookData.overview} />n      n      {/* Main Content Grid */}n      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">n        {/* Main Content */}n        <div className="lg:col-span-2 space-y-6">n          {/* Modules */}n          {playbookData.modules.map((module, index) => (n            <div key={index} className="bg-gray-800/30 rounded-lg border border-gray-700 p-4">n              <h3 className="text-lg font-semibold text-white mb-3">n                {index + 1}. {module.title}n              </h3>n              <p className="text-gray-300 mb-4">{module.description}</p>n              n              {/* Steps */}n              <div className="space-y-3">n                {module.steps.map((step, stepIndex) => (n                  <StepAccordionn                    key={stepIndex}n                    step={step}n                    stepNumber={stepIndex + 1}n                  />n                ))}n              </div>n              n              {/* Tools for this module */}n              {module.tools.length > 0 && (n                <div className="mt-4">n                  <h4 className="text-md font-medium text-white mb-2">Recommended Tools</h4>n                  <ToolGrid tools={module.tools} />n                </div>n              )}n            </div>n          ))}n          n          {/* Tips Section */}n          <div className="bg-gradient-to-br from-purple-900/20 to-blue-900/20 rounded-lg border border-purple-500/30 p-4">n            <h3 className="text-lg font-semibold text-purple-300 mb-3">Pro Tips</h3>n            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">n              {playbookData.modules.flatMap(module => module.steps).flatMap(step => step.tips || []).slice(0, 6).map((tip, index) => (n                <TipCard key={index} tip={tip} />n              ))}n            </div>n          </div>n        </div>n        n        {/* Sidebar */}n        <div className="space-y-6">n          {/* Progress Sidebar */}n          <SidebarProgress modules={playbookData.modules} />n          n          {/* Tools Overview */}n          <ToolsOverview modules={playbookData.modules} />n          n          {/* Download Section */}n          <DownloadSection playbookData={playbookData} prefix={prefix} />n        </div>n      </div>n    </div>n  );n};